
/**
  The macro "trmg2" holds the definition for the graphical flowchart of this model,
  with steps and links connecting steps.

  Put the following in immediate execution to get better error behavior:
    global flowchart_debug
    flowchart_debug = 1

**/
Macro "trmg2" (Args)
Body:
    // model = FlowChart( { StartNodes } , { EndNodes } , Description)
    model = FlowChart({"Skimming","Initial Processsing","Aggregation"},{"Summaries","Time of Day","NonMotorized Models"},)
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"Summaries",,,)
    FlowChartNode(model,"Skimming",,,)
    FlowChartNode(model,"Transit Assignment",,,)
    FlowChartNode(model,"Convergence",,,)
    FlowChartNode(model,"Choice Models",,,)
    FlowChartNode(model,"Roadway Assignment",,,)
    FlowChartNode(model,"Initial Processsing",,,)
    FlowChartNode(model,"Time of Day",,,)
    FlowChartNode(model,"Aggregation",,,)
    FlowChartNode(model,"Generation Models",,,)
    FlowChartNode(model,"NonMotorized Models",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"Skimming","Choice Models",True,,)
    FlowChartLink(model,"Transit Assignment","Summaries",True,,)
    FlowChartLink(model,"Convergence","Transit Assignment",2,,)
    FlowChartLink(model,"Convergence","Skimming",True,,1)
    FlowChartLink(model,"Choice Models","Roadway Assignment",True,,)
    FlowChartLink(model,"Roadway Assignment","Convergence",True,,)
    FlowChartLink(model,"Aggregation","Time of Day",True,,)
    FlowChartLink(model,"Initial Processsing","Generation Models",True,,)
    FlowChartLink(model,"Generation Models","NonMotorized Models",True,,)
    Return(model)
EndMacro


Macro "Accessibility" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Accessibility"}},
                  {"Picture","bmp\\plan_config_v3.bmp"}}
EndMacro


Macro "Home-based Productions" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Resident Productions"}},
                  {"Picture","bmp\\planlanduse_v3.bmp"}}
EndMacro


Macro "NonMotorized Choice" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"NonMotorized Choice"}},
                  {"Picture","bmp\\planlanduse_v3.bmp"}}
EndMacro


Macro "Time of Day" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Time of Day"}},
                  {"Picture","bmp\\planskim_v3.bmp"}}
EndMacro


Macro "Summaries" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Summaries"}},
                  {"Picture","bmp\\planpeople_v3.bmp"}}
EndMacro


Macro "Parking Model" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Parking Model"}},
                  {"Picture","bmp\\planmodesplit_v3.bmp"}}
EndMacro


Macro "Skimming" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Skimming"}},
                  {"Picture","bmp\\planskim_v3.bmp"}}
EndMacro


Macro "Transit Assignment" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Transit Assignment"}},
                  {"Picture","bmp\\planassignbus_v3.bmp"}}
EndMacro


Macro "Mode Choice" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Mode Choice"}},
                  {"Picture","bmp\\planmodesplit_v3.bmp"}}
EndMacro


Macro "NonResident DC and MC" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"NonResident DC and MC"}},
                  {"Picture","bmp\\planmodesplit_v3.bmp"}}
EndMacro


Macro "Destination Choice" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Destination Choice"}},
                  {"Picture","bmp\\planmodesplit_v3.bmp"}}
EndMacro


Macro "Aggregation" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Aggregation"}},
                  {"Picture","bmp\\planskim_v3.bmp"}}
EndMacro


Macro "Create Assignment Matrices" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Create Assignment Matrices"}},
                    {"Picture","bmp\\planassigncar_v3.bmp"}}
EndMacro


Macro "NonHomeBased" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"NonHomeBased"}},
                  {"Picture","bmp\\planmodesplit_v3.bmp"}}
EndMacro


Macro "Pre Assignment" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Pre Assignment"}},
                  {"Picture","bmp\\planassigncar_v3.bmp"}}
EndMacro


Macro "AM Assignment" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"AM Roadway Assignment"}},
                  {"Picture","bmp\\planassigncar_v3.bmp"}}
EndMacro


Macro "MD Assignment" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"MD Roadway Assignment"}},
                  {"Picture","bmp\\planassigncar_v3.bmp"}}
EndMacro


Macro "trmg2.Pins" (Args)
Body:
   // Do not modify the following line:
   Positions = null
   Return(Positions)
EndMacro


Macro "PM Assignment" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"PM Roadway Assignment"}},
                  {"Picture","bmp\\planassigncar_v3.bmp"}}
EndMacro


Macro "NT Assignment" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"NT Roadway Assignment"}},
                  {"Picture","bmp\\planassigncar_v3.bmp"}}
EndMacro


Macro "Post Assignment" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Post Assignment"}},
                  {"Picture","bmp\\planassigncar_v3.bmp"}}
EndMacro


Macro "Convergence" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"Shape","Decision"}}
Body:
    
    iter = Args.FeedbackIteration
    max_iters = Args.FeedbackIterations
    target_prmse = Args.FeedbackConvergence

    mr = CreateObject("Model.Runtime")
    periods = mr.RunCode("Get Unconverged Periods", Args)

    // Add any periods that converged to the list of converged periods
    for period in periods do
        prmse = Args.(period + "_PRMSE")
        if prmse <= target_prmse or iter >= max_iters 
            then Args.converged_periods = Args.converged_periods + {period}
    end
    
    // Feedback is done when all periods have converged or hit max iters
    converged = 0
    if Args.periods.length = Args.converged_periods.length then converged = 1
    if converged = 0 then Args.FeedbackIteration = iter + 1
    Return(converged + 1)
EndMacro


Macro "Link.Convergence.Transit Assignm" (Args,Result)
    Attributes = {{"Run_Condition","Result = 2"}}
EndMacro


Macro "Link.Convergence.Skimming" (Args,Result)
    Attributes = {{"Run_Condition","Result = 1"}}
EndMacro


Macro "Choice Models" (Args,Result)
    Attributes = {{"Description","Stage 4"},
                  {"Picture","bmp\\planmodesplit_v3.bmp"}}
Body:
    model = FlowChart({"Parking Model"},{"NonResident DC and MC"},"Group steps")
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"Parking Model",,,)
    FlowChartNode(model,"Mode Choice",,,)
    FlowChartNode(model,"NonResident DC and MC",,,)
    FlowChartNode(model,"Destination Choice",,,)
    FlowChartNode(model,"NonHomeBased",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"Parking Model","Mode Choice",True,,)
    FlowChartLink(model,"Mode Choice","Destination Choice",True,,)
    FlowChartLink(model,"Destination Choice","NonHomeBased",True,,)
    FlowChartLink(model,"NonHomeBased","NonResident DC and MC",True,,)
    Return(model)
EndMacro


Macro "Roadway Assignment" (Args,Result)
    Attributes = {{"Description","Stage 5"},
                  {"Picture","bmp\\planassigncar_v3.bmp"}}
Body:
    model = FlowChart({"Create Assignment Matrices"},{"Post Assignment"},"Group steps")
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"Create Assignment Matrices",,,)
    FlowChartNode(model,"Pre Assignment",,,)
    FlowChartNode(model,"AM Assignment",,,)
    FlowChartNode(model,"MD Assignment",,,)
    FlowChartNode(model,"PM Assignment",,,)
    FlowChartNode(model,"NT Assignment",,,)
    FlowChartNode(model,"Post Assignment",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"Create Assignment Matrices","Pre Assignment",True,,)
    FlowChartLink(model,"Pre Assignment","AM Assignment",True,,)
    FlowChartLink(model,"Pre Assignment","MD Assignment",True,,)
    FlowChartLink(model,"Pre Assignment","PM Assignment",True,,)
    FlowChartLink(model,"Pre Assignment","NT Assignment",True,,)
    FlowChartLink(model,"AM Assignment","Post Assignment",True,,)
    FlowChartLink(model,"MD Assignment","Post Assignment",True,,)
    FlowChartLink(model,"PM Assignment","Post Assignment",True,,)
    FlowChartLink(model,"NT Assignment","Post Assignment",True,,)
    Return(model)
EndMacro


Macro "Area Type" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Area Type"}}}
EndMacro


Macro "Capacities" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Capacities"}}}
EndMacro


Macro "Speeds & Tolls" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Speeds & Tolls"}}}
EndMacro


Macro "Network Creation" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Network Creation"}}}
EndMacro


Macro "Create Initial Output Files" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Create Initial Output Files"}}}
EndMacro


Macro "Disaggregate Curves" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Disaggregate Curves"}},
                  {"Picture","bmp\\planlanduse_v3.bmp"}}
EndMacro


Macro "IPU Synthesis" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"IPU Synthesis"}},
                  {"Picture","bmp\\planlanduse_v3.bmp"}}
EndMacro


Macro "Auto Ownership" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"Auto Ownership"}},
                  {"Picture","bmp\\planlanduse_v3.bmp"}}
EndMacro


Macro "Population Synthesis" (Args,Result)
    Attributes = {{"Description","Stage 1"},
                  {"Picture","bmp\\planlanduse_v3.bmp"}}
Body:
    // model = FlowChart( { StartNodes } , { EndNodes } , Description)
    model = FlowChart({"Disaggregate Curves"},{"Auto Ownership"},"Group steps")
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"Disaggregate Curves",,,)
    FlowChartNode(model,"IPU Synthesis",,,)
    FlowChartNode(model,"Auto Ownership",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"Disaggregate Curves","IPU Synthesis",True,,)
    FlowChartLink(model,"IPU Synthesis","Auto Ownership",True,,)
    Return(model)
EndMacro


Macro "Network Calculators" (Args,Result)
    Attributes = {{"Description","Stage 1"},
                  {"Picture","bmp\\plan_config_v3.bmp"}}
Body:
    // model = FlowChart( { StartNodes } , { EndNodes } , Description)
    model = FlowChart({"Area Type"},{"Network Creation"},"Group steps")
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"Area Type",,,)
    FlowChartNode(model,"Capacities",,,)
    FlowChartNode(model,"Speeds & Tolls",,,)
    FlowChartNode(model,"Network Creation",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"Area Type","Capacities",True,,)
    FlowChartLink(model,"Capacities","Speeds & Tolls",True,,)
    FlowChartLink(model,"Speeds & Tolls","Network Creation",True,,)
    Return(model)
EndMacro


Macro "Initial Processsing" (Args,Result)
    Attributes = {{"Description","Stage 1"}}
Body:
    // model = FlowChart( { StartNodes } , { EndNodes } , Description)
    model = FlowChart({"Create Initial Output Files"},{"Population Synthesis"},"Group steps")
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"Accessibility",,,)
    FlowChartNode(model,"Population Synthesis",,,)
    FlowChartNode(model,"Create Initial Output Files",,,)
    FlowChartNode(model,"Network Calculators",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"Accessibility","Population Synthesis",True,,)
    FlowChartLink(model,"Create Initial Output Files","Network Calculators",True,,)
    FlowChartLink(model,"Network Calculators","Accessibility",True,,)
    Return(model)
EndMacro


Macro "Airport" (Args,Result)
    Attributes = {{"Class",{"GISDK"}}}
Body:
    ShowMessage('Running: Airport')
    Return(True)
EndMacro


Macro "Externals" (Args,Result)
    Attributes = {{"Class",{"GISDK"}}}
Body:
    ShowMessage('Running: Externals')
    Return(True)
EndMacro


Macro "Commerical Vehicles" (Args,Result)
    Attributes = {{"Class",{"GISDK"}}}
Body:
    ShowMessage('Running: Commerical Vehicles')
    Return(True)
EndMacro


Macro "Special Markets Generation" (Args,Result)
    Attributes = {{"Description","Stage 1"}}
Body:
    // model = FlowChart( { StartNodes } , { EndNodes } , Description)
    model = FlowChart({"Airport"},{"Commerical Vehicles"},"Group steps")
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"Airport",,,)
    FlowChartNode(model,"Externals",,,)
    FlowChartNode(model,"Commerical Vehicles",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"Airport","Externals",True,,)
    FlowChartLink(model,"Externals","Commerical Vehicles",True,,)
    Return(model)
EndMacro


Macro "Generation Models" (Args,Result)
    Attributes = {{"Description","Stage 1"}}
Body:
    // model = FlowChart( { StartNodes } , { EndNodes } , Description)
    model = FlowChart({"Home-based Productions"},{"Special Markets Generation"},"Group steps")
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"Home-based Productions",,,)
    FlowChartNode(model,"Special Markets Generation",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"Home-based Productions","Special Markets Generation",True,,)
    Return(model)
EndMacro


Macro "NM Distribution" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"NM Distribution"}}}
EndMacro


Macro "NM Time-of-Day" (Args,Result)
    Attributes = {{"Class",{"GISDK"}},
                  {"MacroNames",{"NM Time-of-Day"}}}
EndMacro


Macro "NonMotorized Models" (Args,Result)
    Attributes = {{"Description","Stage 1"}}
Body:
    // model = FlowChart( { StartNodes } , { EndNodes } , Description)
    model = FlowChart({"NonMotorized Choice"},{"NM Time-of-Day"},"Group steps")
    //
    // Nodes
    //
    // FlowChartNode(model,NodeName,MacroName,UI,Description)
    //
    FlowChartNode(model,"NonMotorized Choice",,,)
    FlowChartNode(model,"NM Distribution",,,)
    FlowChartNode(model,"NM Time-of-Day",,,)
    //
    // Links
    //
    // FlowChartLink(model , FromNode , ToNode , Condition , Description , IsFeedbackLoop)
    //
    FlowChartLink(model,"NonMotorized Choice","NM Distribution",True,,)
    FlowChartLink(model,"NM Distribution","NM Time-of-Day",True,,)
    Return(model)
EndMacro

